{"version":3,"file":"users.mjs","sources":["../../../projects/users/src/infrastructure/ui/layouts/form-layout/form-layout.component.ts","../../../projects/users/src/infrastructure/ui/layouts/form-layout/form-layout.component.html","../../../projects/users/src/domain/state/state.factory.ts","../../../projects/users/src/domain/state/planes.state.ts","../../../projects/users/src/domain/state/index.ts","../../../projects/users/src/infrastructure/services/user.service.ts","../../../projects/users/src/application/CreateUserUseCase.ts","../../../projects/users/src/infrastructure/ui/layouts/register-layout/register-layout.component.ts","../../../projects/users/src/infrastructure/ui/layouts/register-layout/register-layout.component.html","../../../projects/users/src/infrastructure/ui/routes/users.routes.ts","../../../projects/users/src/public-api.ts","../../../projects/users/src/users.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\nimport { HeaderComponent, LoginFormComponent } from 'shared';\n\n@Component({\n  selector: 'lib-form-layout',\n  imports: [RouterOutlet,HeaderComponent,LoginFormComponent],\n  templateUrl: './form-layout.component.html',\n  styleUrl: './form-layout.component.scss'\n})\nexport class FormLayoutComponent {\n\n}\n","<main class=\"main\">\n    <div class=\"main__container\">\n        <app-header></app-header>\n        <router-outlet></router-outlet>\n    </div>\n</main>\n<app-login-form></app-login-form>","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { IState } from '../model/state.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StateFactory {\n  state<T>(subject$: BehaviorSubject<T>): IState<T> {\n    return {\n      $: () => subject$.asObservable(),\n      snapshot: () => this.inmutabilize(subject$.getValue()),\n      set: (value: T) => subject$.next(this.inmutabilize(value)),\n    };\n  }\n\n  private inmutabilize<T>(value: T): T {\n    return JSON.parse(JSON.stringify(value));\n  }\n}\n","import { inject, Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { CreateUserResponse } from '../model/createUserResponse';\nimport { StateFactory } from './state.factory';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserState {\n  private readonly _factory = inject(StateFactory);\n  private readonly _user$ = new BehaviorSubject<CreateUserResponse>(null);\n\n  store() {\n    return {\n      _userCreated: this._factory.state(this._user$),\n    }\n  }\n\n}\n","import { inject, Injectable } from '@angular/core';\nimport { UserState } from './planes.state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class State {\n  private readonly _userCreated = inject(UserState);\n\n  get users() {\n    return this._userCreated.store();\n  }\n\n}","import { HttpClient } from '@angular/common/http';\nimport { inject, Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CreateUserRequest } from '../../domain/model/createUser.request';\nimport { CreateUserResponse } from '../../domain/model/createUserResponse';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserService {\n  private readonly http = inject(HttpClient);\n  createUser(request: CreateUserRequest): Observable<CreateUserResponse> {\n    return this.http.post<CreateUserResponse>('http://localhost:8080/users', request);\n  }\n  \n}\n","import { inject, Injectable } from '@angular/core';\nimport { Observable, Subscription, tap } from 'rxjs';\nimport { CreateUserRequest } from '../domain/model/createUser.request';\nimport { CreateUserResponse } from '../domain/model/createUserResponse';\nimport { State } from '../domain/state';\nimport { UserService } from '../infrastructure/services/user.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CreateUserUseCase {\n  private readonly _service = inject(UserService);\n  private readonly _state = inject(State);\n  private subscriptions!: Subscription;\n\n  user$(): Observable<CreateUserResponse> {\n    return this._state.users._userCreated.$();\n  }\n\n  initSubscriptions(): void {\n    this.subscriptions = new Subscription();\n  }\n\n  destroySubscriptions(): void {\n    this.subscriptions.unsubscribe();\n  }\n\n  execute(request: CreateUserRequest): Observable<CreateUserResponse> {\n    return this._service\n      .createUser(request)\n      .pipe(\n        tap((response: CreateUserResponse) => {\n          this._state.users._userCreated.set(response);\n        })\n      );\n  }\n  \n}\n","import { CommonModule } from '@angular/common';\nimport { Component, inject } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ReactiveFormsModule,\n  Validators,\n} from '@angular/forms';\nimport { Observable, tap } from 'rxjs';\nimport { ButtonComponent, IButton, InputComponent } from 'shared';\nimport { CreateUserUseCase } from '../../../../application/CreateUserUseCase';\nimport { CreateUserRequest } from '../../../../domain/model/createUser.request';\nimport { CreateUserResponse } from '../../../../domain/model/createUserResponse';\n\n@Component({\n  selector: 'lib-register-layout',\n  imports: [ButtonComponent, InputComponent, ReactiveFormsModule, CommonModule],\n  templateUrl: './register-layout.component.html',\n  styleUrl: './register-layout.component.scss',\n})\nexport class RegisterLayoutComponent {\n  private fb = inject(FormBuilder);\n  private readonly _createUserUseCase = inject(CreateUserUseCase);\n  userCreated$: Observable<CreateUserResponse>;\n  isRegistrationSuccess = false;\n  userEmail = '';\n  showErrorModal = false;\n  errorMessage = '';\n\n  form: FormGroup = this.fb.group(\n    {\n      treatment: ['', Validators.required],\n      name: [\n        '',\n        [\n          Validators.required,\n          Validators.minLength(2),\n          Validators.pattern(/^[a-zA-ZñÑáéíóúÁÉÍÓÚ\\s]+$/),\n        ],\n      ],\n      firstSurname: [\n        '',\n        [\n          Validators.required,\n          Validators.minLength(2),\n          Validators.pattern(/^[a-zA-ZñÑáéíóúÁÉÍÓÚ\\s]+$/),\n        ],\n      ],\n      secondSurname: [\n        '',\n        [\n          Validators.required,\n          Validators.minLength(2),\n          Validators.pattern(/^[a-zA-ZñÑáéíóúÁÉÍÓÚ\\s]+$/),\n        ],\n      ],\n      birthDate: ['', [Validators.required, this.ageValidator()]],\n      documentType: ['', Validators.required],\n      documentNumber: ['', [Validators.required, this.documentValidator()]],\n      terms: [false, Validators.requiredTrue],\n      email: [\n        '',\n        [\n          Validators.required,\n          Validators.email,\n          Validators.pattern(/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/),\n        ],\n      ],\n      prefix: ['', [Validators.required]],\n      phone: ['', [Validators.required, Validators.pattern(/^[0-9]{9}$/)]],\n      password: [\n        '',\n        [\n          Validators.required,\n          Validators.minLength(8),\n          this.passwordStrengthValidator(),\n        ],\n      ],\n      repeatPassword: ['', Validators.required],\n    },\n    {\n      validators: this.passwordMatchValidator,\n    }\n  );\n\n  submitButtonData: IButton = {\n    class: 'primary',\n    size: 'large',\n    label: 'Regístrate',\n    disabled: true,\n  };\n\n  constructor() {}\n\n  ngOnInit() {\n    this._createUserUseCase.initSubscriptions();\n    this.userCreated$ = this._createUserUseCase.user$();\n  }\n\n  ngOnDestroy() {\n    this._createUserUseCase.destroySubscriptions();\n  }\n\n  private ageValidator() {\n    return (control: AbstractControl) => {\n      if (!control.value) return null;\n      const age =\n        new Date().getFullYear() - new Date(control.value).getFullYear();\n      return age >= 18 ? null : { underage: true };\n    };\n  }\n\n  private passwordStrengthValidator() {\n    return (control: AbstractControl) => {\n      if (!control.value) return null;\n      const hasNumber = /[0-9]/.test(control.value);\n      const hasUpper = /[A-Z]/.test(control.value);\n      const hasLower = /[a-z]/.test(control.value);\n      const hasSpecial = /[!@#$%^&*]/.test(control.value);\n      return hasNumber && hasUpper && hasLower && hasSpecial\n        ? null\n        : { weakPassword: true };\n    };\n  }\n\n  private passwordMatchValidator(form: FormGroup) {\n    const password = form.get('password');\n    const confirmPassword = form.get('repeatPassword');\n    return password &&\n      confirmPassword &&\n      password.value !== confirmPassword.value\n      ? { passwordMismatch: true }\n      : null;\n  }\n\n  private documentValidator() {\n    return (control: AbstractControl) => {\n      if (!control.value) return null;\n\n      const documentType = this.form?.get('documentType')?.value;\n      switch (documentType) {\n        case 'SPANISH_ID_CARD':\n          return /^[0-9]{8}[A-Z]$/.test(control.value)\n            ? null\n            : { invalidDNI: true };\n        case 'PASSPORT':\n          return /^[A-Z0-9]{6,}$/.test(control.value)\n            ? null\n            : { invalidPassport: true };\n        case 'FOREIGNER_ID_CARD':\n          return /^[XYZ][0-9]{7}[A-Z]$/.test(control.value)\n            ? null\n            : { invalidNIE: true };\n        default:\n          return /^[A-Z0-9]{5,}$/.test(control.value)\n            ? null\n            : { invalidDocument: true };\n      }\n    };\n  }\n\n  validateForm() {\n    this.submitButtonData.disabled = !this.form.valid;\n  }\n\n  register() {\n    if (this.form.valid) {\n      const request: CreateUserRequest = {\n        title: this.form.get('treatment')?.value,\n        name: this.form.get('name')?.value,\n        firstLastName: this.form.get('firstSurname')?.value,\n        lastLastName: this.form.get('secondSurname')?.value,\n        birthDate: this.form.get('birthDate')?.value + 'T00:00:00',\n        documentType: this.form.get('documentType')?.value,\n        documentNumber: this.form.get('documentNumber')?.value,\n        email: this.form.get('email')?.value,\n        password: this.form.get('password')?.value,\n        phone: this.form.get('phone')?.value,\n        prefix: this.form.get('prefix')?.value,\n        frequent: false,\n        numberOfFlights: 0,\n        role: 'USER',\n      };\n\n      this._createUserUseCase\n        .execute(request)\n        .pipe(\n          tap((response: CreateUserResponse) => {\n            this.userEmail = this.form.get('email')?.value;\n            this.isRegistrationSuccess = true;\n          })\n        )\n        .subscribe({\n          error: (error) => {\n            this.showErrorModal = true;\n            this.errorMessage =\n              error.error.message;  \n          },\n        });\n        \n    } else {\n      this.form.markAllAsTouched();\n    }\n  }\n\n  closeErrorModal() {\n    this.showErrorModal = false;\n    this.register();\n  }\n\n  closeErrorModalWithOutEvent(){\n    this.showErrorModal = false;\n  }\n\n}\n","<div class=\"register\">\n  <div class=\"register__image-side\">\n    <img src=\"../../assets/images/register.png\" alt=\"Register background\">\n  </div>\n\n  <div class=\"register__content\" *ngIf=\"isRegistrationSuccess\">\n    <div class=\"register__success\">\n      <img src=\"../../assets/images/login.svg\" alt=\"Success icon\" class=\"register__success-icon\">\n      <h1 class=\"register__success-title\">¡Muy bien!</h1>\n      <h2 class=\"register__success-subtitle\">Tu cuenta ha sido creada exitosamente</h2>\n      <p class=\"register__success-message\">\n        Ya puedes acceder a todos los beneficios de Air Europa SUMA\n      </p>\n      \n    </div>\n  </div>\n\n  <div class=\"error-modal\" *ngIf=\"showErrorModal\">\n    <div class=\"error-modal__content\">\n      <button class=\"error-modal__close\" (click)=\"closeErrorModalWithOutEvent()\">×</button>\n      <img src=\"../../assets/images/error.svg\" alt=\"Error\" class=\"error-modal__icon\">\n      <h2 class=\"error-modal__title\">Perdona, hubo un error</h2>\n      <p class=\"error-modal__message\">{{ errorMessage }}</p>\n      <button class=\"error-modal__button\" (click)=\"closeErrorModal()\">\n        Volver a intentar\n      </button>\n    </div>\n  </div>\n  \n  <div class=\"register__content\"  *ngIf=\"!isRegistrationSuccess\">\n    <h1 class=\"register__title\">\n      Regístrate\n      <span>en Air Europa SUMA</span>\n    </h1>\n\n    <p class=\"register__description\">\n      SUMA es la forma de agradecer tu confianza en nosotros...\n    </p>\n\n    <p class=\"register__note\">Los campos marcados con (*) son obligatorios.</p>\n\n    <form [formGroup]=\"form\" class=\"register__form\" (ngSubmit)=\"register()\" action=\"\" *ngIf=\"!isRegistrationSuccess\">\n      <fieldset class=\"register__fieldset\">\n\n        <legend>Tus datos personales</legend>\n        <p class=\"register__fieldset-note\">\n          Los datos introducidos deben coincidir exactamente con los datos de su documento de identificación\n        </p>\n\n        <div class=\"register__form-row\">\n\n          <div class=\"register__input-group\">\n            <label>Tratamiento <span class=\"register__required\">*</span></label>\n            <select formControlName=\"treatment\" required>\n              <option value=\"\">Seleccionar</option>\n              <option value=\"sr\">Sr.</option>\n              <option value=\"sra\">Sra.</option>\n            </select>\n            <span class=\"error-message\" *ngIf=\"form.get('treatment')?.errors?.['required']\">\n              El tratamiento es obligatorio\n            </span>\n          </div>\n\n          <div class=\"register__input-group\">\n            <label>Nombre <span class=\"register__required\">*</span></label>\n            <input type=\"text\" formControlName=\"name\" required>\n            <span class=\"error-message\" *ngIf=\"form.get('name')?.errors?.['required']\">\n              <span *ngIf=\"form.get('name')?.errors?.['required']\">El nombre es obligatorio</span>\n              <span *ngIf=\"form.get('name')?.errors?.['minlength']\">El nombre debe tener al menos 2 caracteres</span>\n              <span *ngIf=\"form.get('name')?.errors?.['pattern']\">El nombre solo puede contener letras</span>\n            </span>\n          </div>\n\n        </div>\n\n        <div class=\"register__form-row\">\n          <div class=\"register__input-group\">\n            <label>Primer apellido <span class=\"register__required\">*</span></label>\n            <input type=\"text\" formControlName=\"firstSurname\" required>\n            <span class=\"error-message\" *ngIf=\"form.get('firstSurname')?.errors\">\n              <span *ngIf=\"form.get('firstSurname')?.errors?.['required']\">El primer apellido es obligatorio</span>\n              <span *ngIf=\"form.get('firstSurname')?.errors?.['minlength']\">El primer apellido es debe tener al menos 2\n                caracteres</span>\n              <span *ngIf=\"form.get('firstSurname')?.errors?.['pattern']\">El primer apellido solo puede contener\n                letras</span>\n            </span>\n          </div>\n\n          <div class=\"register__input-group\">\n            <label>Segundo apellido</label>\n            <input type=\"text\" formControlName=\"secondSurname\">\n            <span class=\"error-message\" *ngIf=\"form.get('secondSurname')?.errors\">\n              <span *ngIf=\"form.get('secondSurname')?.errors?.['required']\">El segundo apellido es obligatorio</span>\n              <span *ngIf=\"form.get('secondSurname')?.errors?.['minlength']\">El segundo apellido es debe tener al menos\n                2 caracteres</span>\n              <span *ngIf=\"form.get('secondSurname')?.errors?.['pattern']\">El segundo apellido solo puede contener\n                letras</span>\n            </span>\n          </div>\n        </div>\n\n        <div class=\"register__input-group\">\n          <label>Fecha de nacimiento <span class=\"register__required\">*</span></label>\n          <input type=\"date\" formControlName=\"birthDate\" required>\n        </div>\n\n        <div class=\"register__form-row\">\n          <div class=\"register__input-group\">\n            <label>Tipo de documento <span class=\"register__required\">*</span></label>\n            <select formControlName=\"documentType\" required>\n              <option value=\"\">Seleccionar</option>\n              <option value=\"SPANISH_ID_CARD\">DNI Español</option>\n              <option value=\"PASSPORT\">Pasaporte</option>\n              <option value=\"OTHER\">Otros</option>\n              <option value=\"ID_CARD\">Documento de identidad</option>\n              <option value=\"FOREIGNER_ID_CARD\">NIE/Cert. Registro Central de Extranje...</option>\n            </select>\n            <span class=\"error-message\" \n                  *ngIf=\"form.get('documentType')?.errors?.['required']\">\n              Por favor, seleccione un tipo de documento\n            </span>\n           </div>\n\n          <div class=\"register__input-group\">\n            <label>Número de documento <span class=\"register__required\">*</span></label>\n            <input type=\"text\" formControlName=\"documentNumber\" required>\n            <span class=\"error-message\" *ngIf=\"form.get('documentNumber')?.errors\">\n              <span *ngIf=\"form.get('documentNumber')?.errors?.['required']\">El número de documento es\n                obligatorio</span>\n              <span *ngIf=\"form.get('documentNumber')?.errors?.['invalidDNI']\">DNI inválido</span>\n              <span *ngIf=\"form.get('documentNumber')?.errors?.['invalidPassport']\">Pasaporte inválido</span>\n              <span *ngIf=\"form.get('documentNumber')?.errors?.['invalidNIE']\">NIE inválido</span>\n            </span>\n          </div>\n        </div>\n      </fieldset>\n\n      <fieldset class=\"register__fieldset\">\n        <legend>Tus datos de contacto</legend>\n\n        <div class=\"register__input-group\">\n          <label>E-mail <span class=\"register__required\">*</span></label>\n          <input type=\"email\" formControlName=\"email\" required>\n          <span class=\"error-message\" *ngIf=\"form.get('email')?.errors && form.get('email')?.touched\">\n            <span *ngIf=\"form.get('email')?.errors?.['required']\">El email es obligatorio</span>\n            <span *ngIf=\"form.get('email')?.errors?.['email']\">Ingrese un email válido</span>\n          </span>\n        </div>\n\n        <div class=\"register__form-row\">\n          <div class=\"register__input-group\">\n            <label>Prefijo <span class=\"register__required\">*</span></label>\n            <select formControlName=\"prefix\" required>\n              <option value=\"\">Seleccionar</option>\n              <option value=\"593\">+593 (Ecuador)</option>\n              <option value=\"57\">+57 (Colombia)</option>\n              <option value=\"598\">+598 (Uruguay)</option>\n            </select>\n            <span class=\"error-message\" *ngIf=\"form.get('prefix')?.errors?.['required']\">\n              Por favor, seleccione un prefijo\n            </span>\n          </div>\n\n          <div class=\"register__input-group\">\n            <label>Teléfono <span class=\"register__required\">*</span></label>\n            <input type=\"number\" formControlName=\"phone\" required>\n          </div>\n        </div>\n      </fieldset>\n\n      <fieldset class=\"register__fieldset\">\n        <legend>Selecciona tu contraseña</legend>\n\n        <div class=\"register__input-group\">\n          <label>Contraseña <span class=\"register__required\">*</span></label>\n          <div class=\"password-field\">\n            <input type=\"password\" formControlName=\"password\" required>\n            <button type=\"button\" class=\"show-password\">\n              <img src=\"assets/svgs/eye.svg\" alt=\"Mostrar contraseña\">\n            </button>\n          </div>\n          <span class=\"error-message\" *ngIf=\"form.get('password')?.errors\">\n            <span *ngIf=\"form.get('password')?.errors?.['required']\">La contraseña es obligatoria</span>\n            <span *ngIf=\"form.get('password')?.errors?.['minlength']\">La contraseña debe tener al menos 8\n              caracteres</span>\n            <span *ngIf=\"form.get('password')?.errors?.['weakPassword']\">\n              La contraseña debe contener al menos una mayúscula, una minúscula, un número y un carácter especial\n            </span>\n          </span>\n        </div>\n\n        <div class=\"register__input-group\">\n          <label>Repite tu contraseña <span class=\"register__required\">*</span></label>\n          <div class=\"password-field\">\n            <input type=\"password\" formControlName=\"repeatPassword\" required>\n            <button type=\"button\" class=\"show-password\">\n              <img src=\"assets/svgs/eye.svg\" alt=\"Mostrar contraseña\">\n            </button>\n          </div>\n          <span class=\"error-message\" *ngIf=\"form.errors?.['passwordMismatch']\">\n            Las contraseñas no coinciden\n          </span>\n        </div>\n      </fieldset>\n\n      <div class=\"register__terms\">\n        <input type=\"checkbox\" id=\"terms\" formControlName=\"terms\" required>\n        <label for=\"terms\">\n          Acepto las condiciones generales del\n          <a href=\"#\">Programa Air Europa SUMA</a> y la\n          <a href=\"#\">política de privacidad</a>\n        </label>\n        <span class=\"error-message\" *ngIf=\"form.get('terms')?.errors?.['required']\">\n          Debe aceptar los términos y condiciones para continuar\n        </span>\n      </div>\n\n      <button type=\"submit\" class=\"register__submit\">Regístrate</button>\n\n      <div class=\"register__login\">\n        <span>¿Ya eres parte de Air Europa SUMA?</span>\n        <a href=\"/login\">Inicia sesión</a>\n      </div>\n    </form>\n  </div>\n</div>","import { Routes } from \"@angular/router\";\nimport { FormLayoutComponent } from \"../layouts/form-layout/form-layout.component\";\nimport { RegisterLayoutComponent } from \"../layouts/register-layout/register-layout.component\";\n\n\nexport const userRoutes: Routes= [\n    {\n        path: '',\n        component: FormLayoutComponent,\n        children: [\n            {\n                path: '',\n                component:  RegisterLayoutComponent\n            },\n        ]\n\n    }\n];","/*\n * Public API Surface of users\n */\n\nexport * from './infrastructure/ui/routes/users.routes';\n\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}