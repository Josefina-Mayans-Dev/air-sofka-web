import { OnDestroy, OnInit } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { Observable } from 'rxjs';
import { IPassenger } from '../../../../domain/model/passenger.model';
import { IPassengerContact } from '../../../../domain/model/passenger-contact.model';
import { IFlightSelected } from 'flight';
import * as i0 from "@angular/core";
export declare class PassengersComponent implements OnInit, OnDestroy {
    private readonly _useCaseContact;
    private readonly _useCasePassengerSave;
    private readonly _useCasePassengerUpdate;
    private readonly _useCaseFlightSelected;
    private headerService;
    private readonly _router;
    contactSave$: Observable<IPassengerContact>;
    listPassengers$: Observable<IPassenger[]>;
    flight$: Observable<IFlightSelected>;
    stepLabels: string[];
    currentStepIndex: number;
    formData: any[];
    passengerForms: FormGroup[];
    isNextButtonDisabled: boolean;
    contact: IPassengerContact;
    passenger: IPassenger;
    constructor();
    onFormReady(form: FormGroup, index: number): void;
    onStepChange(index: number): void;
    onComplete(data: any[]): void;
    updateStep(event: any): void;
    checkIfValid(index: number): void;
    ngOnDestroy(): void;
    ngOnInit(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<PassengersComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PassengersComponent, "lib-pasajeros", never, {}, {}, never, never, true, never>;
}
